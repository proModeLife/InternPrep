{"id":958361335,"lang":"python3","lang_name":"Python3","time":"1 week, 4 days","timestamp":1685200157,"status":10,"status_display":"Accepted","runtime":"670 ms","url":"/submissions/detail/958361335/","is_pending":"Not Pending","title":"Sort List","memory":"38.7 MB","code":"class Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        mid = self.get_mid(head)\n        left, right = self.sortList(head), self.sortList(mid)\n\n        return self.merge_two_sorted(left, right)\n\n\n    def merge_two_sorted(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:\n        if not list1:\n            return list2\n\n        if not list2:\n            return list1\n\n        sentinel = ListNode()\n        prev = sentinel\n        while list1 and list2:\n            if list1.val < list2.val:\n                prev.next = list1\n                list1 = list1.next\n            else:\n                prev.next = list2\n                list2 = list2.next\n            prev = prev.next\n\n        if list1:\n            prev.next = list1\n        else:\n            prev.next = list2\n\n        return sentinel.next\n\n\n    def get_mid(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        mid_prev = None\n        while head and head.next:\n            mid_prev = mid_prev.next if mid_prev else head\n            head = head.next.next\n\n        mid = mid_prev.next\n        mid_prev.next = None\n\n        return mid\n","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false}