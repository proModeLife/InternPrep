{"id":955284218,"lang":"python3","lang_name":"Python3","time":"2 weeks, 2 days","timestamp":1684778057,"status":10,"status_display":"Accepted","runtime":"643 ms","url":"/submissions/detail/955284218/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"18.2 MB","code":"from typing import List\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        # Calculate the target sum\n        target = sum(nums)\n        if target % 2 == 1:\n            # If the sum is odd, it cannot be partitioned into two equal subsets\n            return False\n        else:\n            target //= 2\n        \n        # Initialize the dynamic programming set with 0\n        dp = set()\n        dp.add(0)\n        \n        # Sort the input list\n        nums.sort()\n        \n        # Initialize the left and right pointers\n        left, right = 0, len(nums) - 1\n        \n        # Loop until the pointers meet\n        while left < right:\n            # Initialize the next dynamic programming set\n            next_dp = set()\n            \n            # Iterate through the current dynamic programming set\n            for t in dp:\n                # Check if the sum can be reached by adding the current number to# the right pointer\n                if t + nums[right] == target:\n                    return True\n                next_dp.add(t + nums[right])\n                next_dp.add(t)\n            \n            # Update the dynamic programming set\n            dp = set()\n            for t in next_dp:\n                # Check if the sum can be reached by adding the current number to the left pointer\n                if t + nums[left] == target:\n                    return True\n                dp.add(t + nums[left])\n                dp.add(t)\n            \n            # Move the pointers\n            left += 1\n            right -= 1\n        \n        # If the pointers meet, check if the remaining number can reach the target sum\n        if left == right:\n            for t in dp:\n                if t + nums[right] == target:\n                    return True\n        \n        # If no subset can be partitioned into two equal subsets, return False\n        return False","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false}