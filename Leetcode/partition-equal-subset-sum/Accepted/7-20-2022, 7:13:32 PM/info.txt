{"id":752040541,"lang":"cpp","lang_name":"C++","time":"10 months, 3 weeks","timestamp":1658324612,"status":10,"status_display":"Accepted","runtime":"541 ms","url":"/submissions/detail/752040541/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"76.1 MB","code":"class Solution {\npublic:\n    bool f(int i, vector<int>& nums, int target,vector<vector<int>> &dp ){\n        if(target==0) return true;\n        if(i==0 ){\n            return target==nums[0];\n        }\n        if(dp[i][target]!= -1) return dp[i][target]==1;\n        bool notTake = f(i-1,nums,target,dp);\n        bool Take = false;\n        if(nums[i]<= target){\n        Take= f(i-1,nums,target-nums[i],dp);\n        }\n\n        return dp[i][target]=Take | notTake;\n    }\n    bool canPartition(vector<int>& nums) {\n        int total=0;\n        for(auto it: nums) total+= it;\n        if(total %2==1) return false;\n        total/=2;\n        vector<vector<int>> dp (nums.size()+1,vector<int>(total+1,-1));\n        return f(nums.size()-1,nums,total,dp);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false}