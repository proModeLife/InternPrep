{"id":752053664,"lang":"cpp","lang_name":"C++","time":"10 months, 3 weeks","timestamp":1658325851,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/752053664/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution {\npublic:\n    bool f(int i, vector<int>& nums, int target,vector<vector<int>> &dp ){\n        if(target==0) return true;\n        if(i==0 ){\n            return target==nums[0];\n        }\n        if(dp[i][target]!= -1) return dp[i][target]==1;\n        bool notTake = f(i-1,nums,target,dp);\n        bool Take = false;\n        if(nums[i]<= target){\n        Take= f(i-1,nums,target-nums[i],dp);\n        }\n\n        return dp[i][target]=Take | notTake;\n    }\n    bool canPartition(vector<int>& nums) {\n        int total=0;\n        for(auto it: nums) total+= it;\n        if(total %2==1) return false;\n        total/=2;\n        vector<bool> prev(total+1,0),curr(total+1,0);\n        prev[0]=curr[0]=true;\n        prev[nums[0]]=true;\n        for(int i=1; i<nums.size();i++){\n            for(int t=1;t<=total;t++){\n                bool notTake= prev[t];\n                bool Take = false;\n                if(nums[i]<= t){\n                Take= prev[t-nums[i]];\n                 }\n                curr[t]=Take | notTake;\n            }\n            prev= curr;\n        }\n        return prev[total];\n    }\n};","compare_result":"111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-equal-subset-sum","has_notes":false}