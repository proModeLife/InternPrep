{"id":956647266,"lang":"python3","lang_name":"Python3","time":"2Â weeks","timestamp":1684955062,"status":10,"status_display":"Accepted","runtime":"114 ms","url":"/submissions/detail/956647266/","is_pending":"Not Pending","title":"Reorder List","memory":"25.9 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n        \nclass Solution:\n    def reorderList(self, head: Optional[ListNode]) -> None:\n        \"\"\"\n        Do not return anything, modify head in-place instead.\n        \"\"\"\n        # Find the middle of the linked list\n        slow, fast = head, head\n        prev = None\n        while fast and fast.next:\n            fast = fast.next.next\n            # prev = slow\n            slow = slow.next\n        \n        # Reverse the second half of the linked list\n        while slow:\n            tmp = slow\n            slow = slow.next\n            tmp.next= prev\n            prev = tmp\n        \n        # Merge the two halves of the linked list\n        curr = head\n        while curr and prev.next:\n            next1, next2 = curr.next, prev.next\n            curr.next = prev\n            prev.next = next1\n            curr = next1\n            prev = next2","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false}