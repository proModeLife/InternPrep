{"id":857231878,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1670607283,"status":10,"status_display":"Accepted","runtime":"855 ms","url":"/submissions/detail/857231878/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock III","memory":"217.7 MB","code":"class Solution {\npublic:\n    int find(vector<int> &prices,int ind,bool buy,int c,vector<vector<vector<int>>> &memo)\n    {   \n        //if buy =1 means we have to buy now\n        //else we have to sell now\n        if(ind>=prices.size()||c>=2) return 0; //counter\n        if(memo[ind][buy][c]!=-1) return memo[ind][buy][c];\n        if(buy) //now we can either buy prices[i] or we can skip it and try next to buy\n        {\n            return memo[ind][buy][c]=max(-prices[ind]+find(prices,ind+1,!buy,c,memo),find(prices,ind+1,buy,c,memo));\n        }\n        else  //now we can either sell prices[i] or we can skip it and try next to sell\n        {\n            return memo[ind][buy][c]=max(prices[ind]+find(prices,ind+1,!buy,c+1,memo),find(prices,ind+1,buy,c,memo));\n        }\n        \n    }\n    int maxProfit(vector<int>& prices) {\n        //here we can do maximum two transaction\n        //Use 3-D vector because here three states i,k,buy/sell\n        vector<vector<vector<int>>> memo(prices.size(),vector<vector<int>>(2,vector<int>(2,-1)));\n          \n       return find(prices,0,1,0,memo); \n    }\n};\n ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-iii","has_notes":false}