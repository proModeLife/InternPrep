{"id":957228341,"lang":"python3","lang_name":"Python3","time":"1 week, 6 days","timestamp":1685036180,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/957228341/","is_pending":"Not Pending","title":"Copy List with Random Pointer","memory":"17.2 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\n        self.val = int(x)\n        self.next = next\n        self.random = random\n\"\"\"\n\nclass Solution:\n    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        if not head:\n            return None\n        \n        # Create a dictionary to store the original nodes as keys and the copied nodes as values\n        nodes = {}\n        \n        # Traverse the original linked list and create a new node for each node in the list\n        # Store the original node as the key and the newly created node as the value in the dictionary\n        curr = head\n        while curr:\n            nodes[curr] = Node(curr.val, None, None)\n            curr = curr.next\n        \n        # Traverse the original linked list again and set the next and random pointers of the copied nodes\n        curr = head\n        while curr:\n            nodes[curr].next = nodes.get(curr.next)\n            nodes[curr].random = nodes.get(curr.random)\n            curr = curr.next\n        \n        # Return the head of the copied linked list\n        return nodes[head]","compare_result":"1111111111111111111","title_slug":"copy-list-with-random-pointer","has_notes":false}