{"id":957129945,"lang":"python3","lang_name":"Python3","time":"1 week, 6 days","timestamp":1685025672,"status":10,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/957129945/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"18.3 MB","code":"class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        visited=set()\n        def dfs(i,j):\n            if i<0 or j<0 or i==len(board) or j==len(board[0]) or board[i][j]!='O' or (i,j) in visited:\n                return\n            visited.add((i,j))\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            if board[i][0] == 'O' and (i,0) not in visited:\n                dfs(i,0)\n            if board[i][len(board[0])-1] == 'O' and (i,len(board[0])-1) not in visited:\n                dfs(i,len(board[0])-1)\n        for j in range(len(board[0])):\n            if board[0][j] == 'O' and (0,j) not in visited:\n                dfs(0,j)\n            if board[len(board)-1][j] == 'O' and (len(board)-1,j) not in visited:\n                dfs(len(board)-1,j)\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j]=='O' and (i,j) not in visited:\n                    board[i][j]='X'\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions","has_notes":false}