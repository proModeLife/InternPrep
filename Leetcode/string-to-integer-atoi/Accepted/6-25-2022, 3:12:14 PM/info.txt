{"id":730761272,"lang":"cpp","lang_name":"C++","time":"11 months, 2 weeks","timestamp":1656150134,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/730761272/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"6.8 MB","code":"class Solution {\npublic:\n    int myAtoi(string input) {\n        int sign = 1; \n        int result = 0; \n        int index = 0;\n        int n = input.size();\n        \n        // Discard all spaces from the beginning of the input string.\n        while (index < n && input[index] == ' ') { \n            index++; \n        }\n        \n        // sign = +1, if it's positive number, otherwise sign = -1. \n        if (index < n && input[index] == '+') {\n            sign = 1;\n            index++;\n        } else if (index < n && input[index] == '-') {\n            sign = -1;\n            index++;\n        }\n        \n        // Traverse next digits of input and stop if it is not a digit. \n        // End of string is also non-digit character.\n        while (index < n && isdigit(input[index])) {\n            int digit = input[index] - '0';\n\n            // Check overflow and underflow conditions. \n            if ((result > INT_MAX / 10) || (result == INT_MAX / 10 && digit > INT_MAX % 10)) { \n                // If integer overflowed return 2^31-1, otherwise if underflowed return -2^31.    \n                return sign == 1 ? INT_MAX : INT_MIN;\n            }\n            \n            // Append current digit to the result.\n            result = 10 * result + digit;\n            index++;\n        }\n        \n        // We have formed a valid number without any overflow/underflow.\n        // Return it after multiplying it with its sign.\n        return sign * result;\n    }\n};","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false}