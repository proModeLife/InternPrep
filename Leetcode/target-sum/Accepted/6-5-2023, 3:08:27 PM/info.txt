{"id":964271053,"lang":"python3","lang_name":"Python3","time":"2 days, 21 hours","timestamp":1685957907,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/964271053/","is_pending":"Not Pending","title":"Target Sum","memory":"16.4 MB","code":"class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        #observational method \n        total=sum(nums)\n\n        if abs(target)>total or (target-total)%2:\n            return 0\n\n        diff = total-target # the difference which we need to cover up using various ways\n        diff//=2\n        dp=[0]*(diff+1)\n        dp[0]=1\n        for i in range(len(nums)):\n            for j in range(diff,nums[i]-1,-1):\n                dp[j]+=dp[j-nums[i]]\n        return dp[diff]\n\n        #backtracking + dp\n        dp={}\n        def backtrack(i,total):\n            if i==len(nums):\n                return total==target\n            elif (i,total) in dp:\n                return dp[(i,total)]\n            else:\n                dp[(i,total)]= backtrack(i+1,total+nums[i])+ backtrack(i+1,total-nums[i])\n                return dp[(i,total)]\n        return backtrack(0,0)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false}