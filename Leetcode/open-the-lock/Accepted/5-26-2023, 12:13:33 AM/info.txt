{"id":957269386,"lang":"python3","lang_name":"Python3","time":"1 week, 6 days","timestamp":1685040213,"status":10,"status_display":"Accepted","runtime":"722 ms","url":"/submissions/detail/957269386/","is_pending":"Not Pending","title":"Open the Lock","memory":"18 MB","code":"from collections import deque\n\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        # Initialize the queue and the visited set\n        queue = deque([('0000', 0)])\n        visited = set(deadends)\n        \n        # Perform a BFS to find the shortest path to the target state\n        while queue:\n            curr, level = queue.popleft()\n            \n            if curr == target:\n                return level\n            \n            if curr in visited:\n                continue\n            \n            visited.add(curr)\n            \n            # Generate all possible next states by rotating one wheel in either direction\n            for i in range(4):\n                for d in [-1, 1]:\n                    next_pos = curr[:i] + str((int(curr[i]) + d) % 10) + curr[i+1:]\n                    if next_pos not in visited:\n                        queue.append((next_pos, level+1))\n        \n        # If the target state is unreachable, return -1\n        return -1","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"open-the-lock","has_notes":false}