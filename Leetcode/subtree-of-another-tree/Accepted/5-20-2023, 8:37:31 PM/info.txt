{"id":953957497,"lang":"python3","lang_name":"Python3","time":"2 weeks, 4 days","timestamp":1684595251,"status":10,"status_display":"Accepted","runtime":"133 ms","url":"/submissions/detail/953957497/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"17.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:\n        if not t:\n            return True\n        if not s:\n            return False\n\n        if self.sameTree(s, t):\n            return True\n        return self.isSubtree(s.left, t) or self.isSubtree(s.right, t)\n\n    def sameTree(self, s, t):\n        if not s and not t:\n            return True\n        if s and t and s.val == t.val:\n            return self.sameTree(s.left, t.left) and self.sameTree(s.right, t.right)\n        return False\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false}