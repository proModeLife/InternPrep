{"id":959485778,"lang":"python3","lang_name":"Python3","time":"1 week, 2 days","timestamp":1685351890,"status":10,"status_display":"Accepted","runtime":"53 ms","url":"/submissions/detail/959485778/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"17.1 MB","code":"from typing import List\n\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        n = len(matrix)\n        m = len(matrix[0])\n        \n        if n == 0 or target < matrix[0][0] or target > matrix[n-1][m-1]:\n            return False \n        \n        l = 0\n        r = m - 1\n        \n        if n == 1:\n            while l <= r:\n                g = (r + l) // 2\n                if matrix[0][g] < target:\n                    l = g + 1\n                elif matrix[0][g] > target:\n                    r = g - 1\n                else:\n                    return True\n            return False \n        \n        else:\n            mid = (n-1) // 2\n            if matrix[mid][0] <= target <= matrix[mid][m-1]:\n                return self.searchMatrix(matrix[mid:mid+1], target)\n            elif target < matrix[mid][0]:\n                return self.searchMatrix(matrix[:mid], target)\n            else:\n                return self.searchMatrix(matrix[mid+1:], target)\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false}