{"id":956616743,"lang":"python3","lang_name":"Python3","time":"2Â weeks","timestamp":1684951941,"status":10,"status_display":"Accepted","runtime":"1473 ms","url":"/submissions/detail/956616743/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"16.6 MB","code":"from typing import List\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [(1,1)]*(n+1) # storing how many LIS end at me \n        mxlen, mxcnt = 0, 0\n    \n        for i in range(n):\n            cnt, mx = 1, 1\n            for j in range(i-1, -1, -1):\n                if nums[j] < nums[i] and dp[j][0] == mx:\n                    cnt += dp[j][1]\n                elif nums[j] < nums[i] and dp[j][0] > mx:\n                    mx = dp[j][0]\n                    cnt = dp[j][1]\n            dp[i] = (mx+1, cnt)\n            mxlen = max(mxlen, mx+1)\n        \n        for i in range(n):\n            if dp[i][0] == mxlen:\n                mxcnt += dp[i][1]\n        \n        return mxcnt","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false}