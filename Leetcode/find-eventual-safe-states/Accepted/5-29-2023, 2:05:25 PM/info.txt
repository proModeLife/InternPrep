{"id":959464769,"lang":"python3","lang_name":"Python3","time":"1 week, 2 days","timestamp":1685349325,"status":10,"status_display":"Accepted","runtime":"679 ms","url":"/submissions/detail/959464769/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"24.9 MB","code":"from collections import defaultdict, deque\nfrom typing import List\n\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        back = defaultdict(list)\n        q = deque()\n        safe = [False] * len(graph)\n        count = [0] * len(graph)\n        \n        for i in range(len(graph)):\n            count[i] = len(graph[i])\n            if len(graph[i]) == 0:\n                safe[i] = True\n                q.append(i)\n            for j in graph[i]:\n                back[j].append(i)\n        \n        while q:\n            d = q.pop()\n            for i in back[d]:\n                count[i] -= 1\n                if count[i] == 0 and not safe[i]:\n                    safe[i] = True\n                    q.append(i)\n        \n        ans = []\n        for i in range(len(safe)):\n            if safe[i]:\n                ans.append(i)\n        \n        return ans\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false}