{"id":854589076,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1670175959,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/854589076/","is_pending":"Not Pending","title":"3Sum Closest","memory":"10.2 MB","code":"class Solution {\npublic:\n    int threeSumClosest(std::vector<int>& nums, int target) {\n    // sort the array\n    std::sort(nums.begin(), nums.end());\n\n    // initialize the closest sum to be the maximum possible value\n    long long int closest_sum = INT_MAX;\n\n    // loop through the array, starting at the first element\n    for (int first = 0; first < nums.size(); first++) {\n        // initialize the left and right pointers\n        int left = first + 1;\n        int right = nums.size() - 1;\n\n        // loop until the left pointer is greater than the right pointer\n        while (left < right) {\n            // calculate the sum of the three numbers pointed to by the first, left, and right pointers\n            long long int curr_sum = nums[first] + nums[left] + nums[right];\n\n            // if the current sum is equal to the target, we have found the three numbers that have the closest sum to the target, so we can return the current sum\n            if (curr_sum == target) {\n                return curr_sum;\n            }\n\n            // if the current sum is less than the target, we need to increase the sum, so we move the left pointer to the next element\n            if (curr_sum < target) {\n                left++;\n            }\n\n            // if the current sum is greater than the target, we need to decrease the sum, so we move the right pointer to the previous element\n            if (curr_sum > target) {\n                right--;\n            }\n\n            // update the closest sum if the current sum is closer to the target than the previous closest sum\n            if (std::abs(target - curr_sum) < std::abs(target - closest_sum)) {\n                closest_sum = curr_sum;\n            }\n        }\n    }\n\n        \n    \n\n    // return the closest sum that we found\n    return closest_sum;\n}\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum-closest","has_notes":false}