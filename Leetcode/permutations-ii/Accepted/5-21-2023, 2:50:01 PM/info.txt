{"id":954416726,"lang":"python3","lang_name":"Python3","time":"2Â weeks, 3Â days","timestamp":1684660801,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/954416726/","is_pending":"Not Pending","title":"Permutations II","memory":"16.7 MB","code":"class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        ans = []\n        visited = set()\n\n        def backtrack(perm):\n            if len(perm) == len(nums):\n                ans.append(perm[:])\n                return\n\n            for i in range(len(nums)):\n                if i in visited or (i > 0 and nums[i] == nums[i-1] and i-1 not in visited):\n                    continue\n                visited.add(i)\n                perm.append(nums[i])\n                backtrack(perm)\n                perm.pop()\n                visited.remove(i)\n\n        nums.sort()\n        backtrack([])\n        return ans","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false}