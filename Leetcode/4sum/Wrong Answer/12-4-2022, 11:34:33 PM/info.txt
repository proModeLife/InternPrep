{"id":854598128,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1670177073,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/854598128/","is_pending":"Not Pending","title":"4Sum","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n            std::sort(nums.begin(), nums.end());\n\n    // initialize a set to store the unique quadruplets\n    std::vector<std::vector<int>> quadruplets;\n\n    // loop through the array, starting at the first element\n    for (int a = 0; a < nums.size(); a++) {\n        // loop through the array, starting at the second element\n        for (int b = a + 1; b < nums.size(); b++) {\n            // initialize the left and right pointers\n            int left = b + 1;\n            int right = nums.size() - 1;\n             // loop until the left pointer is greater than the right pointer\n            while (left < right) {\n                // calculate the sum of the four numbers pointed to by the a, b, left, and right pointers\n                int curr_sum = nums[a] + nums[b] + nums[left] + nums[right];\n\n                // if the current sum is equal to the target, we have found a quadruplet, so we add it to the set of unique quadruplets\n                if (curr_sum == target) {\n                    quadruplets.push_back(std::vector<int>{nums[a], nums[b], nums[left], nums[right]});\n                    left++;\n                    right--;\n                }\n\n                // if the current sum is less than the target, we need to increase the sum, so we move the left pointer to the next element\n                if (curr_sum < target) {\n                    left++;\n                }\n\n                // if the current sum is greater than the target, we need to decrease the sum, so we move the right pointer to the previous element\n                if (curr_sum > target) {\n                    right--;\n                }\n            }\n        }\n    }\n    auto end = std::unique(quadruplets.begin(), quadruplets.end());\n\n    // use erase to remove the duplicate elements from the vector\n    quadruplets.erase(end, quadruplets.end());\n    // convert the set of unique quadruplets to a vector and return it\n    return quadruplets;\n    }\n};","compare_result":"1111111111111111101111111111111111111111111111111111111111111110111111111111111111111111011111111111111111111111111011100110011111101011010001100101111110010011001001100000100111111011100111111110010111110001000111011011101111111111111111110111111111111111111111111111111111111111111000000000","title_slug":"4sum","has_notes":false}