{"id":953171254,"lang":"python3","lang_name":"Python3","time":"2 weeks, 6 days","timestamp":1684477311,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/953171254/","is_pending":"Not Pending","title":"Min Stack","memory":"N/A","code":"class MinStack:\n    def __init__(self):\n        self.count = {}\n        self.s1 = []\n        self.s2 = [float('inf')]\n\n    def push(self, val: int) -> None:\n        self.s1.append(val)\n        if val <= self.s2[-1]:\n            if val not in self.count:\n                self.count[val] = 1\n            else:\n                self.count[val] += 1\n            self.s2.append(val)\n\n    def pop(self) -> None:\n        if self.s1:\n            val = self.s1.pop()\n            if val == self.s2[-1]:\n                self.count[val] -= 1\n                if self.count[val] == 0:\n                    self.s2.pop()\n            else:\n                if val in self.count:\n                    self.count[val] -= 1\n\n    def top(self) -> int:\n        if self.s1:\n            return self.s1[-1]\n\n    def getMin(self) -> int:\n        if len(self.s2) > 1:\n            return self.s2[-1]","compare_result":"1111100110111111111101111101111","title_slug":"min-stack","has_notes":false}