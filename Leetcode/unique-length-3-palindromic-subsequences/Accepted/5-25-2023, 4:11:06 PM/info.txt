{"id":957018302,"lang":"python3","lang_name":"Python3","time":"1 week, 6 days","timestamp":1685011266,"status":10,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/957018302/","is_pending":"Not Pending","title":"Unique Length-3 Palindromic Subsequences","memory":"21.5 MB","code":"class Solution:\n    def countPalindromicSubsequence(self, string: str) -> int:\n        letter_indices = defaultdict(list)\n        \n        # store the indices of each letter in the string\n        for i, letter in enumerate(string):\n            letter_indices[letter].append(i)\n        \n        count = 0\n        for i in range(26):\n            # get the letter we're currently checking\n            current_letter = chr(ord(\"a\") + i)\n            if current_letter not in letter_indices:\n                continue\n            \n            # get the range of indices between the first and last occurrence of the current letter\n            left, right = letter_indices[current_letter][0] + 1, letter_indices[current_letter][-1] - 1\n            if left > right:\n                continue\n            \n            # check for palindromic subsequences that include the current letter\n            for j in range(26):\n                other_letter = chr(ord(\"a\") + j)\n                if other_letter in letter_indices:\n                    # use binary search to find the first index of the other letter within the range\n                    index = bisect.bisect_left(letter_indices[other_letter], left)\n                    if index < len(letter_indices[other_letter]) and letter_indices[other_letter][index] <= right:\n                        count += 1\n        \n        return count","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"unique-length-3-palindromic-subsequences","has_notes":false}