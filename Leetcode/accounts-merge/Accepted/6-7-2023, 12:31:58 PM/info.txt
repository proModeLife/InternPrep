{"id":965706387,"lang":"python3","lang_name":"Python3","time":"1Â day","timestamp":1686121318,"status":10,"status_display":"Accepted","runtime":"216 ms","url":"/submissions/detail/965706387/","is_pending":"Not Pending","title":"Accounts Merge","memory":"20.8 MB","code":"class UnionFind:\n    def __init__(self,n):\n        self.par=[i for i in range(n)]\n        self.rank=[1]*n\n    def find(self,i):\n        p=self.par[i]\n        while p!=self.par[p]:\n            p=self.par[p]\n        return p\n    def union(self,x,y):\n        p1,p2=self.find(x),self.find(y)\n        if p1 == p2:\n            return False\n        if self.rank[p1] > self.rank[p2]:\n            self.par[p2] = p1\n            self.rank[p1] += self.rank[p2]\n        else:\n            self.par[p1] = p2\n            self.rank[p2] += self.rank[p1]\n        return True\n\nclass Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        uf=UnionFind(len(accounts))\n        emailToAcc={}\n        for i, a in enumerate(accounts):\n            for e in a[1:]:\n                if e in emailToAcc:\n                    uf.union(i, emailToAcc[e])\n                else:\n                    emailToAcc[e] = i\n\n        emailGroup = defaultdict(list) # index of acc -> list of emails\n        for e, i in emailToAcc.items():\n            leader = uf.find(i)\n            emailGroup[leader].append(e)\n\n        res = []\n        for i, emails in emailGroup.items():\n            name = accounts[i][0]\n            res.append([name] + sorted(emailGroup[i])) # array concat\n        return res\n","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"accounts-merge","has_notes":false}