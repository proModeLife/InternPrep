{"id":959167003,"lang":"python3","lang_name":"Python3","time":"1 week, 3 days","timestamp":1685301030,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/959167003/","is_pending":"Not Pending","title":"Rotate List","memory":"16.4 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        if not head:\n            return None\n        \n        # Find the length of the linked list\n        ln = 0\n        curr = head\n        while curr:\n            curr = curr.next\n            ln += 1\n        \n        # Adjust k to avoid unnecessary rotations\n        k %= ln\n        if k == 0:\n            return head\n        \n        # Find the new head and tail positions after rotation\n        dl = ListNode()  # Dummy node for the new head\n        dl.next = head\n        slow = fast = dl\n        \n        # Move the fast pointer k steps ahead\n        while k :\n            fast = fast.next\n            k -= 1\n        \n        # Move both pointers until the fast pointer reaches the end of the list\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # Perform the rotation\n        new_head = slow.next\n        slow.next = None\n        fast.next = head\n        \n        return new_head\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list","has_notes":false}