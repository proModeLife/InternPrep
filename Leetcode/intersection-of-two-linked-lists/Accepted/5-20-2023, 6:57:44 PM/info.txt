{"id":953913766,"lang":"python3","lang_name":"Python3","time":"2 weeks, 4 days","timestamp":1684589264,"status":10,"status_display":"Accepted","runtime":"166 ms","url":"/submissions/detail/953913766/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"31.5 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:\n        lenA, lenB = 0, 0\n        currA, currB = headA, headB\n        \n        # Find the lengths of the two linked lists\n        while currA:\n            currA = currA.next\n            lenA += 1\n        \n        while currB:\n            currB = currB.next\n            lenB += 1\n        \n        # Reset the current pointers to the beginning of the linked lists\n        currA, currB = headA, headB\n        \n        # Determine which linked list is longer and calculate the difference\n        if lenA > lenB:\n            for i in range(lenA - lenB):\n                currA = currA.next\n        else:\n            for i in range(lenB - lenA):\n                currB = currB.next\n        \n        # Traverse both linked lists until they intersect\n        while currA and currB and currA != currB:\n            currA = currA.next\n            currB = currB.next\n        \n        # Return the intersection node or None if the linked lists do not intersect\n        return currA","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists","has_notes":false}