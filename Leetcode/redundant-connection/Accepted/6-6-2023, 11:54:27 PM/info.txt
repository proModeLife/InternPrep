{"id":965366321,"lang":"python3","lang_name":"Python3","time":"1Â day, 13Â hours","timestamp":1686075867,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/965366321/","is_pending":"Not Pending","title":"Redundant Connection","memory":"16.7 MB","code":"class Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        par = [i for i in range(len(edges) + 1)]\n        rank = [1] * (len(edges) + 1)\n\n        def find(n):\n            p = par[n]\n            while p != par[p]:\n                par[p] = par[par[p]]\n                p = par[p]\n            return p\n\n        # return False if already unioned\n        def union(n1, n2):\n            p1, p2 = find(n1), find(n2)\n\n            if p1 == p2:\n                return False\n            if rank[p1] > rank[p2]:\n                par[p2] = p1\n                rank[p1] += rank[p2]\n            else:\n                par[p1] = p2\n                rank[p2] += rank[p1]\n            return True\n\n        for n1, n2 in edges:\n            if not union(n1, n2):\n                return [n1, n2]\n","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false}